/**
 * Block System Styles
 * Provides consistent styling for the Notion-style block editor
 */

/* CSS Variables for block system */
:root {
  /* Block spacing - consistent 4px between all blocks */
  --block-spacing: 0.25rem; /* 4px */
  
  /* Editor layout */
  --editor-max-width: 680px;
  --editor-padding-x: 3rem; /* 48px */
  
  /* Handle positioning */
  --handle-offset: 2.5rem; /* 40px from content edge */
  --handle-size: 1.5rem; /* 24px */
  --handle-gap: 0.125rem; /* 2px between buttons */
  
  /* Drop zones */
  --drop-zone-height: 1.75rem; /* 28px - single line height */
  --drop-zone-color: rgba(59, 130, 246, 0.08); /* primary with 8% opacity */
}

/* Block wrapper - the container for each block */
.block-wrapper {
  position: relative;
  margin-bottom: var(--block-spacing);
  /* Ensure proper stacking context */
  z-index: 0;
}

.block-wrapper:last-child {
  margin-bottom: 0;
}

/* Dragging state */
.block-wrapper.is-dragging {
  opacity: 0.5;
  cursor: grabbing;
}

/* Invisible hover target - extends full width for easy hovering */
.hover-target {
  position: absolute;
  top: 0;
  bottom: 0;
  /* Extend beyond content area */
  left: calc(-1 * var(--editor-padding-x));
  right: calc(-1 * var(--editor-padding-x));
  z-index: 1;
  /* Invisible by default */
  pointer-events: auto;
  cursor: default;
}

/* Debug mode - uncomment to visualize hover areas */
.debug-mode .hover-target {
  background: rgba(255, 0, 0, 0.1);
  border: 1px dashed red;
}

/* Block handle container */
.block-handle-container {
  position: absolute;
  left: 0;
  top: 0;
  z-index: 10;
  /* Position to the left of content */
  transform: translateX(-2.5rem);
}

/* Block handle styles (imported from existing styles) */
.block-handle {
  display: flex;
  align-items: center;
  gap: var(--handle-gap);
  padding: 2px;
  background: hsl(var(--background));
  border: 1px solid hsl(var(--border));
  border-radius: 6px;
  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
  opacity: 1;
  transition: opacity 0.15s ease;
}

/* Block content - the actual editable content */
.block-content {
  position: relative;
  z-index: 0;
  /* Ensure content is above hover target but below handle */
}

/* React node view wrapper adjustments */
.react-node-view {
  /* Remove any default margins */
  margin: 0;
}

/* Tiptap's node view wrapper */
.node-view-wrapper {
  /* Ensure it doesn't interfere with our layout */
  position: relative;
}

/* Block-specific spacing overrides */
.block-wrapper[data-block-type="heading"] {
  /* Headings get more space */
  margin-bottom: calc(var(--block-spacing) * 3);
}

.block-wrapper[data-block-type="heading"]:has(.ProseMirror h1) {
  margin-bottom: 1rem;
}

.block-wrapper[data-block-type="heading"]:has(.ProseMirror h2) {
  margin-bottom: 0.75rem;
}

.block-wrapper[data-block-type="heading"]:has(.ProseMirror h3) {
  margin-bottom: 0.5rem;
}

/* List items need special handling */
.block-wrapper[data-block-type="listItem"] {
  margin-bottom: 0; /* Lists handle their own spacing */
}

/* Code blocks */
.block-wrapper[data-block-type="codeBlock"] {
  margin-bottom: calc(var(--block-spacing) * 2);
}

/* Blockquotes */
.block-wrapper[data-block-type="blockquote"] {
  margin-bottom: calc(var(--block-spacing) * 2);
}

/* Ensure proper nesting for lists */
.block-wrapper ul,
.block-wrapper ol {
  margin: 0;
  padding-left: 1.5rem;
}

/* Task lists */
.block-wrapper ul[data-type="taskList"] {
  padding-left: 0;
}

.block-wrapper ul[data-type="taskList"] li {
  display: flex;
  align-items: flex-start;
  gap: 0.5rem;
  padding: 0;
  margin-bottom: var(--block-spacing);
}

/* Drop indicator for drag and drop */
.drop-indicator {
  position: absolute;
  left: 0;
  right: 0;
  height: var(--drop-zone-height);
  background-color: var(--drop-zone-color);
  border-radius: 4px;
  pointer-events: none;
  z-index: 5;
  transition: all 0.2s cubic-bezier(0.4, 0, 0.2, 1);
  opacity: 0;
  animation: fadeIn 0.2s ease forwards;
}

@keyframes fadeIn {
  to {
    opacity: 1;
  }
}

/* Ensure placeholders work with block wrapper */
.block-wrapper .is-empty::before {
  content: attr(data-placeholder);
  color: hsl(var(--muted-foreground));
  opacity: 0.5;
  float: left;
  height: 0;
  pointer-events: none;
}

/* Hide placeholders during drag */
.ProseMirror.is-dragging .is-empty::before {
  display: none;
} 