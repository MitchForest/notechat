/* Custom Block Drag Handle Styles */

/* Editor wrapper positioning */
#tiptap-editor-wrapper {
  position: relative !important;
  overflow: visible !important;
}

/* Main drag handle */
.block-drag-handle {
  width: 20px;
  height: 20px;
  display: flex;
  align-items: center;
  justify-content: center;
  cursor: grab;
  
  /* Notion-like light grey */
  color: oklch(var(--muted-foreground) / 0.4);
  background-color: oklch(var(--muted) / 0.3);
  border-radius: 4px;
  
  /* Smooth transitions */
  transition: all 0.15s ease;
  opacity: 0;
  
  /* Ensure clickable */
  pointer-events: auto;
  z-index: 1000;
}

/* Handle visible state */
.block-drag-handle.visible {
  opacity: 1;
}

/* Handle hover state */
.block-drag-handle:hover {
  color: oklch(var(--muted-foreground) / 0.7);
  background-color: oklch(var(--muted) / 0.5);
}

/* Handle active state */
.block-drag-handle:active,
.block-drag-handle.dragging {
  cursor: grabbing;
  color: oklch(var(--muted-foreground));
  background-color: oklch(var(--muted) / 0.7);
}

/* Icon sizing */
.block-drag-handle svg {
  width: 16px;
  height: 16px;
  flex-shrink: 0;
}

/* Prevent text selection */
.block-drag-handle {
  user-select: none;
  -webkit-user-select: none;
}

/* Ensure blocks maintain spacing */
.ProseMirror > * {
  margin-bottom: 4px;
}

.ProseMirror > *:first-child {
  margin-top: 0;
}

.ProseMirror > *:last-child {
  margin-bottom: 0;
}

/* Drop indicator - Blue line showing where block will be dropped */
.block-drop-indicator {
  height: 2px;
  background: oklch(var(--primary));
  box-shadow: 0 0 0 1px oklch(var(--background)), 0 0 0 2px oklch(var(--primary) / 0.3);
  pointer-events: none;
  animation: dropcursor-pulse 1s ease-in-out infinite;
}

@keyframes dropcursor-pulse {
  0%, 100% { opacity: 1; }
  50% { opacity: 0.5; }
}

/* Selected node during drag */
.ProseMirror .ProseMirror-selectednode {
  outline: 2px solid oklch(var(--primary) / 0.3);
  outline-offset: 2px;
  border-radius: 4px;
  background-color: oklch(var(--primary) / 0.05);
}

/* Editor dragging state */
.ProseMirror.dragging {
  cursor: grabbing !important;
}

/* Hide placeholders during drag */
.ProseMirror.dragging .is-empty::before {
  opacity: 0 !important;
} 